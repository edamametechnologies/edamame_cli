#compdef edamame_cli

autoload -U is-at-least

_edamame_cli() {
    typeset -A opt_args
    typeset -a _arguments_options
    local ret=1

    if is-at-least 5.2; then
        _arguments_options=(-s -S -C)
    else
        _arguments_options=(-s -C)
    fi

    local context curcontext="$curcontext" state line
    _arguments "${_arguments_options[@]}" : \
'*-v[Verbosity level (-v\: info, -vv\: debug, -vvv\: trace)]' \
'*--verbose[Verbosity level (-v\: info, -vv\: debug, -vvv\: trace)]' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
":: :_edamame_cli_commands" \
"*::: :->edamame_cli" \
&& ret=0
    case $state in
    (edamame_cli)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:edamame_cli-command-$line[1]:"
        case $line[1] in
            (completion)
_arguments "${_arguments_options[@]}" : \
'*-v[Verbosity level (-v\: info, -vv\: debug, -vvv\: trace)]' \
'*--verbose[Verbosity level (-v\: info, -vv\: debug, -vvv\: trace)]' \
'-h[Print help]' \
'--help[Print help]' \
':SHELL -- The shell to generate completions for:(bash elvish fish powershell zsh)' \
&& ret=0
;;
(list-methods)
_arguments "${_arguments_options[@]}" : \
'*-v[Verbosity level (-v\: info, -vv\: debug, -vvv\: trace)]' \
'*--verbose[Verbosity level (-v\: info, -vv\: debug, -vvv\: trace)]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
&& ret=0
;;
(get-method-info)
_arguments "${_arguments_options[@]}" : \
'*-v[Verbosity level (-v\: info, -vv\: debug, -vvv\: trace)]' \
'*--verbose[Verbosity level (-v\: info, -vv\: debug, -vvv\: trace)]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
':METHOD -- Method name (use '\''list-methods'\'' to see available methods):_default' \
&& ret=0
;;
(list-method-infos)
_arguments "${_arguments_options[@]}" : \
'*-v[Verbosity level (-v\: info, -vv\: debug, -vvv\: trace)]' \
'*--verbose[Verbosity level (-v\: info, -vv\: debug, -vvv\: trace)]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
&& ret=0
;;
(interactive)
_arguments "${_arguments_options[@]}" : \
'*-v[Verbosity level (-v\: info, -vv\: debug, -vvv\: trace)]' \
'*--verbose[Verbosity level (-v\: info, -vv\: debug, -vvv\: trace)]' \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(rpc)
_arguments "${_arguments_options[@]}" : \
'--pretty[Pretty print the JSON response]' \
'*-v[Verbosity level (-v\: info, -vv\: debug, -vvv\: trace)]' \
'*--verbose[Verbosity level (-v\: info, -vv\: debug, -vvv\: trace)]' \
'-h[Print help]' \
'--help[Print help]' \
':METHOD -- Method name:_default' \
'::JSON_ARGS_ARRAY -- JSON arguments array:_default' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
":: :_edamame_cli__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:edamame_cli-help-command-$line[1]:"
        case $line[1] in
            (completion)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(list-methods)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(get-method-info)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(list-method-infos)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(interactive)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(rpc)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
}

(( $+functions[_edamame_cli_commands] )) ||
_edamame_cli_commands() {
    local commands; commands=(
'completion:Generate shell completion scripts' \
'list-methods:List all available RPC methods' \
'get-method-info:Get information about a specific RPC method' \
'list-method-infos:List information about all available RPC methods' \
'interactive:Enter interactive mode' \
'rpc:Call a specific RPC method' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'edamame_cli commands' commands "$@"
}
(( $+functions[_edamame_cli__completion_commands] )) ||
_edamame_cli__completion_commands() {
    local commands; commands=()
    _describe -t commands 'edamame_cli completion commands' commands "$@"
}
(( $+functions[_edamame_cli__get-method-info_commands] )) ||
_edamame_cli__get-method-info_commands() {
    local commands; commands=()
    _describe -t commands 'edamame_cli get-method-info commands' commands "$@"
}
(( $+functions[_edamame_cli__help_commands] )) ||
_edamame_cli__help_commands() {
    local commands; commands=(
'completion:Generate shell completion scripts' \
'list-methods:List all available RPC methods' \
'get-method-info:Get information about a specific RPC method' \
'list-method-infos:List information about all available RPC methods' \
'interactive:Enter interactive mode' \
'rpc:Call a specific RPC method' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'edamame_cli help commands' commands "$@"
}
(( $+functions[_edamame_cli__help__completion_commands] )) ||
_edamame_cli__help__completion_commands() {
    local commands; commands=()
    _describe -t commands 'edamame_cli help completion commands' commands "$@"
}
(( $+functions[_edamame_cli__help__get-method-info_commands] )) ||
_edamame_cli__help__get-method-info_commands() {
    local commands; commands=()
    _describe -t commands 'edamame_cli help get-method-info commands' commands "$@"
}
(( $+functions[_edamame_cli__help__help_commands] )) ||
_edamame_cli__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'edamame_cli help help commands' commands "$@"
}
(( $+functions[_edamame_cli__help__interactive_commands] )) ||
_edamame_cli__help__interactive_commands() {
    local commands; commands=()
    _describe -t commands 'edamame_cli help interactive commands' commands "$@"
}
(( $+functions[_edamame_cli__help__list-method-infos_commands] )) ||
_edamame_cli__help__list-method-infos_commands() {
    local commands; commands=()
    _describe -t commands 'edamame_cli help list-method-infos commands' commands "$@"
}
(( $+functions[_edamame_cli__help__list-methods_commands] )) ||
_edamame_cli__help__list-methods_commands() {
    local commands; commands=()
    _describe -t commands 'edamame_cli help list-methods commands' commands "$@"
}
(( $+functions[_edamame_cli__help__rpc_commands] )) ||
_edamame_cli__help__rpc_commands() {
    local commands; commands=()
    _describe -t commands 'edamame_cli help rpc commands' commands "$@"
}
(( $+functions[_edamame_cli__interactive_commands] )) ||
_edamame_cli__interactive_commands() {
    local commands; commands=()
    _describe -t commands 'edamame_cli interactive commands' commands "$@"
}
(( $+functions[_edamame_cli__list-method-infos_commands] )) ||
_edamame_cli__list-method-infos_commands() {
    local commands; commands=()
    _describe -t commands 'edamame_cli list-method-infos commands' commands "$@"
}
(( $+functions[_edamame_cli__list-methods_commands] )) ||
_edamame_cli__list-methods_commands() {
    local commands; commands=()
    _describe -t commands 'edamame_cli list-methods commands' commands "$@"
}
(( $+functions[_edamame_cli__rpc_commands] )) ||
_edamame_cli__rpc_commands() {
    local commands; commands=()
    _describe -t commands 'edamame_cli rpc commands' commands "$@"
}

if [ "$funcstack[1]" = "_edamame_cli" ]; then
    _edamame_cli "$@"
else
    compdef _edamame_cli edamame_cli
fi
